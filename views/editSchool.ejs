<%- layout('layouts/main.ejs') %>

<nav class="navbar">
    <div class="logo">
        <img src="/assets/SVG/homeVector.svg" alt="Logo Mesa" class="imgNavbar">
        <p>HR | DataBase</p>
    </div>
    <ul class="ulNavbar">
        <li><a href="/home/"> <img src="/assets/SVG/igloo-solid.svg" alt="Home" class="homeLogo"> </a></li>
        <li><a href="/users/logout"> <img src="/assets/SVG/power-off-solid.svg" alt="Logout" class="logoutLogo"> </a>
        </li>
    </ul>
</nav>

<section class="formAndImgEmployee" id="formAndImgEmployee">
    <h1 class="titleEmployee">Editar Escuela </h1>
    <div class="back"><a href="/schools"><img src="/assets/SVG/caret-left-solid.svg" alt="back arrow"> Volver</a></div>

    <div class="containerEmployee">
        <div class="searchAndAddEmployee">
            
            <div class="searchEmployee">
                <input type="text" name="employee" id="employee">
                <select name="busquedas" id="busquedas">
                    <option value="error">Elija una opción</option>
                    <option value="error">-------</option>
                    <option value="all">Mostrar todas</option>
                    <option value="fullname">Nombre Completo</option>
                    <option value="address">Dirección</option>
                    <option value="district">Distrito</option>
                    <option value="level">Nivel Educativo</option>
                    <option value="commune">Comuna</option>
                </select>
                <button type="submit" id="btnSearch">Buscar</button>
            </div>
            <h3 class="textResult" id="textResult">Acá se van a mostrar los resultados</h3>
            
            
            <div class="results" id="results">
                <div id="employeeResult"></div>
            </div>
        </div>

    </div>

    <div class="schoolsEditContainer" id="schoolsResultsContainer">

    </div>

    <div class="editSchoolFormDiv" id="editSchoolFormDiv">
        <h3 class="h3SuccessSchoolUpdate" id="h3SuccessSchoolUpdate"></h3>
        <form action="" class="editSchoolForm" id="editSchoolForm">
            <label for="fullname">Nombre Completo</label>
            <input type="text" name="fullname" id="fullname" >
            <label for="educationlevel">Nivel Educativo</label>
            <input type="text" name="educationlevel" id="educationlevel" >
            <label for="numschool">N° Escuela</label>
            <input type="number" name="numschool" id="numschool" >
            <label for="district">Distrito Escolar</label>
            <input type="number" name="district" id="district" >
            <label for="commune">Comuna</label>
            <input type="number" name="commune" id="commune" >
            <label for="address">Dirección</label>
            <input type="text" name="address" id="address" >

            <button type="submit" id="actualizar"> Actualizar </button>
        </form>
    </div>

</section>

<script>
    const option = document.getElementById('busquedas');
    const input = document.getElementById('employee');
    const search = document.getElementById('btnSearch');
    const formAndImgEmployee = document.getElementById('formAndImgEmployee');
    const schoolsResultsContainer = document.getElementById('schoolsResultsContainer');
    const textResult = document.getElementById('textResult');
    const updateBtn = document.getElementById('actualizar');
    const editSchoolFormDiv = document.getElementById('editSchoolFormDiv')
    

    const toFetch = async (URL, toFind) => {                       
        const info = await fetch(`${URL}${toFind}`);
        const response = await info.json();
        return response;
    }

    const toFetchAll = async (URL) => {                       
        const info = await fetch(`${URL}`);
        const response = await info.json();
        return response;
    }

    const toFetchEndopoint = async (URL, endpoint, toFind) => {                 
        const info = await fetch(`${URL}/${endpoint}/${toFind}`);
        if(info.status == 404) {
            return console.log('Not Found')
        } 
        const response = await info.json();
        return response;
        
    }

    const toFetchUpdate = async (URL, options) => {
        const info = await fetch(`${URL}`, options);
        const response = await info.json()
        return response
    }

    const createHeader = () => {

        const showResultsSchools = document.createElement('div');
        const schoolResult = document.createElement('div');
        const address = document.createElement('div');
        const educationlevel = document.createElement('div');
        const fullname = document.createElement('div');

        showResultsSchools.classList.add('showEditSchools');
        schoolResult.classList.add('schoolResult');
        schoolResult.classList.add('backHeader')
        address.classList.add('schoolData');
        educationlevel.classList.add('schoolData');
        fullname.classList.add('schoolData');

        address.innerText = 'Domicilio'
        educationlevel.innerText = 'Nivel Educativo'
        fullname.innerText = 'Nombre Completo'

        schoolResult.appendChild(fullname)
        schoolResult.appendChild(address)
        schoolResult.appendChild(educationlevel)
        showResultsSchools.appendChild(schoolResult)
        schoolsResultsContainer.appendChild(showResultsSchools)
        
    }

    const notFoundResults = (fetched) => {
        if(fetched.Message) {
                textResult.style.color = '#dc143c'
                while (schoolsResultsContainer.hasChildNodes()) {
                        schoolsResultsContainer.lastChild.remove();
                }
                return textResult.innerText = fetched.Message
        } else {
            textResult.innerText = 'Acá se van a mostrar los resultados'
            textResult.style.color = 'black'
        }
    }

    const showResultsOnClick = async () => {
        if(option.value === 'error') {
            input.value = 'La opción a buscar debe ser válida'
            input.style.background = '#6BFF6B'
            textResult.innerText = 'Opción no válida :/'

            input.addEventListener('click', inputFun = (e) => {
                e.preventDefault()
                input.value = ''
                input.style.background = '#fff'

                input.removeEventListener('click', inputFun)
            })
        }

        if(input.value == '' && option.value != 'all') {
            textResult.style.color = '#dc143c'
                while (schoolsResultsContainer.hasChildNodes()) {
                        schoolsResultsContainer.lastChild.remove();
                }
                return textResult.innerText = 'El campo de búsqueda está vacío'
        }

        while (schoolsResultsContainer.hasChildNodes()) {
            schoolsResultsContainer.lastChild.remove();
        }

        let findOneResultOfFetch = null
        let findAllResultOfFetch = null

        if(option.value === 'all') {
            const allSchools = await toFetchAll('/schools/all')

            findAllResultOfFetch = allSchools
            
        }

        if(option.value === 'fullname' || option.value === 'address') {

            const foundedSchools = await toFetchEndopoint('/schools/search', option.value, input.value);

            const checkFetch = notFoundResults(foundedSchools)

            if(checkFetch){
                return
            } else {
                findOneResultOfFetch = foundedSchools
            }
            
        }

        if(option.value === 'district' || option.value === 'level' || option.value === 'commune') {

            const foundedSchools = await toFetchEndopoint('/schools/search', option.value, input.value);

            const checkFetch = notFoundResults(foundedSchools)

            if(checkFetch){
                return
            } else {
                findAllResultOfFetch = foundedSchools
            }


        }

        if(findOneResultOfFetch !== null ){
            textResult.innerText = 'Acá se van a mostrar los resultados'
            textResult.style.color = 'black'
            const h3Update = document.getElementById('h3SuccessSchoolUpdate')

            const school = findOneResultOfFetch.Escuelas


            createHeader();

            const showResultsSchools = document.createElement('div');
            const schoolResult = document.createElement('div');
            const address = document.createElement('div');
            const educationlevel = document.createElement('div');
            const fullname = document.createElement('div');
            const divImgEdit = document.createElement('div');
            const imgEdit = document.createElement('img')

            showResultsSchools.classList.add('showEditSchools');
            schoolResult.classList.add('schoolResult');
            address.classList.add('schoolData');
            educationlevel.classList.add('schoolData');
            fullname.classList.add('schoolData');
            divImgEdit.classList.add('schoolData');

            address.innerText = findOneResultOfFetch.Escuelas.address;
            educationlevel.innerText = findOneResultOfFetch.Escuelas.educationlevel.toUpperCase();
            fullname.innerText = findOneResultOfFetch.Escuelas.fullname;
            imgEdit.src = "/assets/SVG/user-edit-solid.svg";

            divImgEdit.appendChild(imgEdit)
            schoolResult.appendChild(fullname)
            schoolResult.appendChild(address)
            schoolResult.appendChild(educationlevel)
            schoolResult.appendChild(divImgEdit)
            showResultsSchools.appendChild(schoolResult)
            formAndImgEmployee.appendChild(showResultsSchools)
            schoolsResultsContainer.appendChild(showResultsSchools)

            imgEdit.addEventListener('click', editSearch = (e) => {
                    e.preventDefault()

                    const fullname = document.getElementById('fullname');
                    const educationlevel = document.getElementById('educationlevel');
                    const numschool = document.getElementById('numschool');
                    const district = document.getElementById('district');
                    const commune = document.getElementById('commune');
                    const address = document.getElementById('address');
                    

                    h3Update.innerText = ''

                    
                    editSchoolFormDiv.style.display = 'block'

                    const inputsEdit = {
                        fullname, educationlevel, numschool, 
                        district, commune, address,
                    }

                    for(let key in inputsEdit) {
                        inputsEdit[key].value = ''
                        inputsEdit[key].placeholder = school[key]
                    }

                    updateBtn.addEventListener('click', updateSchool = async (e) => {
                        e.preventDefault()

                        const oldDataSchool = {...school}

                        const dataValuesForm = {
                            fullname: fullname.value,
                            educationlevel: educationlevel.value,
                            numschool: numschool.value,
                            district: district.value,
                            commune: commune.value,
                            address: address.value,
                        }

                        for(let key in dataValuesForm){

                            if(dataValuesForm[key] === null || dataValuesForm[key] === ''){
                                dataValuesForm[key] = oldDataSchool[key]
                            }
                        }

                        const options = {
                            body: JSON.stringify(dataValuesForm),
                            method: 'PUT',
                            headers: {
                                "Content-Type": "application/json",
                            },
                        }

                        const url = `/schools/update/${school._id}`

                        const schoolUpdate = await toFetchUpdate(url, options)
                                            .catch(error => {
                                                console.log(error);
                                            });
                        
                        h3Update.innerText = schoolUpdate.Message
                        
                        setTimeout(async ()=> {
                            editSchoolFormDiv.style.display = 'none'
                        },2000)
                    })
                })

        }

        if(findAllResultOfFetch !== null) {
            textResult.innerText = 'Acá se van a mostrar los resultados'
            textResult.style.color = 'black'
            const h3Update = document.getElementById('h3SuccessSchoolUpdate')

            h3Update.innerText = ''

            createHeader();

            for (let i = 0; i < findAllResultOfFetch.Escuelas.length; i++) {
                const school = findAllResultOfFetch.Escuelas[i];

                const showResultsSchools = document.createElement('div');
                const schoolResult = document.createElement('div');
                const address = document.createElement('div');
                const educationlevel = document.createElement('div');
                const fullname = document.createElement('div');

                const divImgEdit = document.createElement('div');
                const imgEdit = document.createElement('img')

                showResultsSchools.classList.add('showEditSchools');
                schoolResult.classList.add('schoolResult');
                address.classList.add('schoolData');
                educationlevel.classList.add('schoolData');
                fullname.classList.add('schoolData');
                divImgEdit.classList.add('schoolData')

                address.innerText = school.address
                educationlevel.innerText = school.educationlevel.toUpperCase()
                fullname.innerText = school.fullname
                imgEdit.src = "/assets/SVG/user-edit-solid.svg";

                divImgEdit.appendChild(imgEdit)
                schoolResult.appendChild(fullname)
                schoolResult.appendChild(address)
                
                schoolResult.appendChild(educationlevel)
                schoolResult.appendChild(divImgEdit)

                showResultsSchools.appendChild(schoolResult)
                formAndImgEmployee.appendChild(showResultsSchools)
                schoolsResultsContainer.appendChild(showResultsSchools)

                imgEdit.addEventListener('click', editSearch = (e) => {
                    e.preventDefault()

                    const fullname = document.getElementById('fullname');
                    const educationlevel = document.getElementById('educationlevel');
                    const numschool = document.getElementById('numschool');
                    const district = document.getElementById('district');
                    const commune = document.getElementById('commune');
                    const address = document.getElementById('address');

                    
                    editSchoolFormDiv.style.display = 'block'

                    const inputsEdit = {
                        fullname, educationlevel, numschool, 
                        district, commune, address,
                    }

                    for(let key in inputsEdit) {
                        inputsEdit[key].value = ''
                        inputsEdit[key].placeholder = school[key]
                    }

                    updateBtn.addEventListener('click', updateSchool = async (e) => {
                        e.preventDefault()

                        
                        const oldDataSchool = {...school}
                        const dataValuesForm = {
                            fullname: fullname.value,
                            educationlevel: educationlevel.value,
                            numschool: numschool.value,
                            district: district.value,
                            commune: commune.value,
                            address: address.value,
                        }

                        for(let key in dataValuesForm){

                            if(dataValuesForm[key] === null || dataValuesForm[key] === ''){
                                dataValuesForm[key] = oldDataSchool[key]
                            }
                        }

                        const options = {
                            body: JSON.stringify(dataValuesForm),
                            method: 'PUT',
                            headers: {
                                "Content-Type": "application/json",
                            },
                        }

                        const url = `/schools/update/${school._id}`

                        const schoolUpdate = await toFetchUpdate(url, options)
                                            .catch(error => {
                                                console.log(error);
                                            });
                        
                        h3Update.innerText = schoolUpdate.Message
                        
                        setTimeout(async ()=> {
                            editSchoolFormDiv.style.display = 'none'
                        },2000)
                    })
                })
                
            }
        } 
    }

    search.addEventListener('click', searchBtn = async (e)=> {
        e.preventDefault();
        showResultsOnClick();
    })

    input.addEventListener('keyup', searchEnter = async (e) => {
        if(e.keyCode == 13) {
            e.preventDefault()
            showResultsOnClick();
        }
    })
</script>

